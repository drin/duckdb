# ------------------------------
# Headers and Sources

# Sources
planner_expression_sources = [
   'bound_expression.cpp'
  ,'bound_aggregate_expression.cpp'
  ,'bound_between_expression.cpp'
  ,'bound_case_expression.cpp'
  ,'bound_cast_expression.cpp'
  ,'bound_columnref_expression.cpp'
  ,'bound_comparison_expression.cpp'
  ,'bound_conjunction_expression.cpp'
  ,'bound_constant_expression.cpp'
  ,'bound_expanded_expression.cpp'
  ,'bound_function_expression.cpp'
  ,'bound_lambda_expression.cpp'
  ,'bound_lambdaref_expression.cpp'
  ,'bound_operator_expression.cpp'
  ,'bound_parameter_expression.cpp'
  ,'bound_reference_expression.cpp'
  ,'bound_subquery_expression.cpp'
  ,'bound_unnest_expression.cpp'
  ,'bound_window_expression.cpp'
]


# ------------------------------
# Build artifacts (libraries)

# An object library (only its objects will be linked against)
objlib_duckdb_planner_expression = static_library('duckdb_planner_expression'
  ,planner_expression_sources
  ,include_directories: [ libduckdb_inc ]
  ,build_by_default: false
  ,install         : false
)

# Accumulate the object files for the final library target
duck_objfiles += objlib_duckdb_planner_expression.extract_all_objects()

